import re
from typing import List, Dict, Any


def mcq_reward(
        completions : List[Dict[str, Any]],
        solution,
        **kwargs
) -> List[float]:
    """
    Reward function that checks if the completion is correct for multiple choice questions.
    Args:
        completions: The completions generated by the model.
        solution: The ground truth solution.
        **kwargs: Other key word arugments. Required if you are passing this as a reward function in the TRL library (otherwise there might be failures due to unexpected keyword arguments).
    Returns:
        Reward vector (List[float])
    """
    contents = [completion[0]['content'] for completion in completions]
    rewards = []

    for content, sol in zip(contents, solution):
        reward = 0.0
        try:
            #Extract the final answer using regex
            content_match = re.search(r'<answer>(.*?)</answer>', content)
            student_answer = content_match.group(1).strip() if content_match else content.strip()
            # print(f'Extracted student answer: {student_answer},')
            if student_answer == sol.strip():
                reward = 1.0
        except Exception:
            pass #Keep reward as 0.0 if the method fails.
        rewards.append(reward)
    return rewards

#Sanity check
if __name__ == "__main__":
    completions = [
        [{'role': 'assistant', 'content': 'The answer is <answer>B</answer>'}],
        [{'role': 'assistant', 'content': 'The answer is <answer>C</answer>'}],
        [{'role': 'assistant', 'content': 'The answer is <answer>A</answer>'}],
    ]
    solutions = ['B', 'A', 'A']
    rewards = mcq_reward(completions, solutions)
    print(rewards)  #Expected output: [1.0, 0.0, 1.0]